• Add some new features to the simpletron:
 ○ Error checking
 ○ Larger program memory (Instruction size may have to be expanded to deal with larger memory)
 ○ Create modulo (remainder) instruction
 ○ Create newline instruction
 ○ Create floating point handling instructions
 ○ Create string handling instructions
 ○ Add support for disk reads and writes

• Rem instructions at the end of a Simple program can change the resulting
  memory addresses of scratchSpace variables. This is harmless afaik, but still
  unasthetic.
  This change occurs because the line numbers corresponding to rem instructions are
  given the memory address of the *following* instruction. This means that if the last
  line(s) of a program consists of rem instructions then those line numbers will be given
  the memory address that the first instruction placed *after* the rem's would be given.
  This causes the compiler to think there are more memory addresses being used for instructions
  than there actually are, causing the scratchSpace (i.e. space *after* all the program memory)
  to be placed slightly farther out than it otherwise would be.

• This is more of a note than anything. To add a new arithmetic operator one must modify:
  simplecode.h -> Add new instruction
  simpletron.c -> interpreter -> Add new case for handling instruction
  arithmetic.c -> precendence -> Specify precendece of operator
  arithmetic.c -> assoc -> Specify associativity of operator (only necessary if right-associative rather than left)
  arithmetic.c -> compute -> Specify the computation to be performed
  compiler.c -> operatorToSimplecode -> Specify the bytecode of the operator
